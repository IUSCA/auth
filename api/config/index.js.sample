
//node
var fs = require('fs');

//contrib
var winston = require('winston');

exports.auth = {
    //mongodb: "mongodb://localhost/auth",
    
    //following are used by IU CAS authentication.
    //normally, these url should be configured on UI (which they are..)
    //but since I have to jump browser to api endpoint (so that it can validate the token),
    //I have to store these urls here. 
    //I think I can somehow proxy validation from the brower so that I can do everything on browser
    
    /* deprecated
    //user scopes to give to all new users when registered
    default_scopes: {
        sca: ["user"],
        mca: ["user"], //needed by mca
        dicom: ["user"], //needed by dicom
    },
    */

    //default user object when registered
    default: {
        //this can be empty.. but don't remove it! (a lot of app expects scopes to exist)
        scopes: {
            sca: ["user"],
            mca: ["user"], //needed by mca
            dicom: ["user"], //needed by dicom
        },
        gids: [ 1 ],
    },

    //isser to use for generated jwt token
    iss: "https://sca.iu.edu/auth",
    //ttl for jwt
    ttl: 24*3600*1000, //1 day
    
    public_key: fs.readFileSync(__dirname+'/auth.pub'),
    private_key: fs.readFileSync(__dirname+'/auth.key'),
    
    //option for jwt.sign
    sign_opt: {algorithm: 'RS256'},

    //allow_signup: false, //prevent user from signing in (set false if not using local auth)
};
    
exports.email_confirmation = {
    //deprecated
};

//for user/pass login (you should use either local, or ldap - but not both)
exports.local = {
    //url base for callbacks only used if req.header.referer is not set (like via cli)
    url: 'https://soichi7.ppa.iu.edu/auth', 
    
    //comment this out if you don't want to confirm email
    email_confirmation: {
        subject: 'SCA Account Confirmation for soichi7',
        from: 'hayashis@iu.edu',  //iu mail server will reject if this is non-repliable address/
    },
    email_passreset: {
        subject: 'SCA password reset instruction',
        from: 'hayashis@iu.edu',  //iu mail server will reject if this is non-repliable address/
    }
};

//for ldap user/pass 
exports.ldap = {
    //passport-ldap config
    server: {
        url: 'ldaps://ads.iu.edu:636',
        bindDn: 'CN=sciaptad,OU=Accounts,DC=ads,DC=iu,DC=edu',
        bindCredentials: fs.readFileSync(__dirname+'/ldap.password', {encoding: 'utf8'}).trim(),
        searchBase: 'ou=Accounts,dc=ads,dc=iu,dc=edu',
        searchFilter: '(sAMAccountName={{username}})'
    }
};

//for x509
exports.x509 = {
    //http header to look for x509 DN 
    //for nginx set proxy_set_header DN $ssl_client_s_dn
    //for apache, SSLOptions +StdEnvVars will set it to SSL_CLIENT_S_DN
    dn_header: 'dn',
    allow_origin: '*', 
};

//create a "project" at https://console.developers.google.com/apis/dashboard and configure
//oauth credential
exports.google = {
    client_id: "714649905668-v6fmqrrba6i2pfe7pq30brj602ng87ik.apps.googleusercontent.com",
    client_secret: "ny8mrSbP3ZjmcxYdD-Aj2aMz",
    callback_url: "https://soichi7.ppa.iu.edu/api/auth/google/callback", //google api is very strict about this..
};

//register at ....
exports.github = {
    client_id: "1b4954b828f45bbd286b",
    client_secret: "3a79e473da458229ff789c10d9a02fcb6bbda264",
    callback_url: "https://soichi7.ppa.iu.edu/api/auth/github/callback",
};

//register at https://developers.facebook.com/docs/facebook-login/web
exports.facebook = {
    //v2.8
    app_id: "1878618049037602",
    app_secret: "78130a8a60f807b2ac1a93fb11cf49f4",
    callback_url: "https://soichi7.ppa.iu.edu/api/auth/facebook/callback",
};

exports.db = {
    dialect: "sqlite", 
    storage: "/usr/local/sqlite/auth.sqlite",
    logging: false
}

//for iucas login
exports.iucas = {
    //url to redirect after successful iucas login (with ?jwt=<jwt>)
    //you should take jwt, store it on localstorage, and redirect to wherever you want to go
    //this is not the same thing as the ui/config.js -- default_redirect_url !!

    //used for casurl, and also used to return to the auth page to display login error messages
    //home_url: 'https://soichi7.ppa.iu.edu/auth', //TODO not sure if this is still used
};

exports.express = {
    //web server port
    port: 12000,
};

exports.logger = {
    winston: {
        //hide headers which may contain jwt
        requestWhitelist: ['url', /*'headers',*/ 'method', 'httpVersion', 'originalUrl', 'query'],
        transports: [
            //display all logs to console
            new winston.transports.Console({
                timestamp: function() {
                    var d = new Date();
                    return d.toString(); //show timestamp
                },
                level: 'debug',
                colorize: true
            }),
            /*
            //store all warnings / errors in error.log
            new (winston.transports.File)({
                filename: '/var/log/sca/error.log',
                level: 'warn'
            })
            */
        ]
    }
}

/*
exports.logger = {
    express: require('morgan')('combined'),
    api: 'log/api.log',
    exception: 'log/exception.log',
    //express_error_handler: {dumpExceptions: true, showStack: true},
}
*/
